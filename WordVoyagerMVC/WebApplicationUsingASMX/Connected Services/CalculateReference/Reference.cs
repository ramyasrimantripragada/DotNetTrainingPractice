//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplicationUsingASMX.CalculateReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculateReference.CalculateServiceSoap")]
    public interface CalculateServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/add", ReplyAction="*")]
        int add(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/add", ReplyAction="*")]
        System.Threading.Tasks.Task<int> addAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/subtract", ReplyAction="*")]
        int subtract(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/subtract", ReplyAction="*")]
        System.Threading.Tasks.Task<int> subtractAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiply", ReplyAction="*")]
        int multiply(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiply", ReplyAction="*")]
        System.Threading.Tasks.Task<int> multiplyAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/divide", ReplyAction="*")]
        int divide(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/divide", ReplyAction="*")]
        System.Threading.Tasks.Task<int> divideAsync(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/modulus", ReplyAction="*")]
        int modulus(int num1, int num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/modulus", ReplyAction="*")]
        System.Threading.Tasks.Task<int> modulusAsync(int num1, int num2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CalculateServiceSoapChannel : WebApplicationUsingASMX.CalculateReference.CalculateServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculateServiceSoapClient : System.ServiceModel.ClientBase<WebApplicationUsingASMX.CalculateReference.CalculateServiceSoap>, WebApplicationUsingASMX.CalculateReference.CalculateServiceSoap {
        
        public CalculateServiceSoapClient() {
        }
        
        public CalculateServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculateServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculateServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculateServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int add(int num1, int num2) {
            return base.Channel.add(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> addAsync(int num1, int num2) {
            return base.Channel.addAsync(num1, num2);
        }
        
        public int subtract(int num1, int num2) {
            return base.Channel.subtract(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> subtractAsync(int num1, int num2) {
            return base.Channel.subtractAsync(num1, num2);
        }
        
        public int multiply(int num1, int num2) {
            return base.Channel.multiply(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> multiplyAsync(int num1, int num2) {
            return base.Channel.multiplyAsync(num1, num2);
        }
        
        public int divide(int num1, int num2) {
            return base.Channel.divide(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> divideAsync(int num1, int num2) {
            return base.Channel.divideAsync(num1, num2);
        }
        
        public int modulus(int num1, int num2) {
            return base.Channel.modulus(num1, num2);
        }
        
        public System.Threading.Tasks.Task<int> modulusAsync(int num1, int num2) {
            return base.Channel.modulusAsync(num1, num2);
        }
    }
}
